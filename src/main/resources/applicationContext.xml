<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

				                        <!--  spring整合hibernate  开始      -->
	<!-- 加载属性文件 -->
	<context:property-placeholder location="classpath:db.properties"/>
	
	<!-- 配置数据源，dataSource，数据库连接池使用 c3p0 的   ComboPooledDataSource 类 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	
	<!-- 配置sessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 依赖DataSource -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 创建工厂需要加载hibernate.cfg.xml文件 -->
		<property name="configLocations" value="classpath:hibernate.cfg.xml"></property>
	</bean>
	
	<!-- spring事务      start -->
	<!-- 配置事务管理器 HibernateTransactionManager -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	
	<!-- 管理事务的方式有两种：xml方式和注解方式 -->
	
	<!-- xml方式管理事务1：利用aop告诉事务管理器具体哪些方法需要开启事务 -->
	<!-- 配置通知：具体增强逻辑（哪些方法需要开启事务，匹配规则） -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<!-- 匹配业务类中方法名称 *代表匹配所有方法名-->
			<tx:method name="save*"/>  
			<tx:method name="update*"/>
			<tx:method name="delete*"/>
			<tx:method name="find*"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置aop -->
	<aop:config>
		<!-- 配置切点：具体哪些方法要增强（真正被增强的方法）,第一个"*"表示返回值，第二个"*"表示类，第三个"*"表示方法，（..）表示属性 -->
		<aop:pointcut expression="execution(* cn.bimart.service.*.*(..))" id="cut"/>
		<!-- 配置切面：将增强逻辑作用到切点   （通知 + 切入点） -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="cut"/>
	</aop:config>
	
	<!-- 注解方式管理事务2：1、开启注解驱动2、在service类上或者方法上使用注解@Transactional -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	<!-- spring事务      end  -->
										 <!--  spring整合hibernate   结束  -->
										 <!--  spring整合struts   开始  -->
										 
										 <!--  spring整合struts   结束  -->
	
	<!-- 注入：springIOC创建对象 -->
	<!-- 配置dao对象 -->
	<bean id="customerDao" class="cn.bimart.dao.impl.CustomerDaoImpl">
		<!-- dao操作数据库使用的hibernate模板，而创建hibernate模板需要sessionFactory,所以dao需要注入sessionFactory,详见HibernateDaoSupport源码 -->
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 配置service对象 -->
	<bean id="customerService" class="cn.bimart.service.impl.CustmoerServiceImpl">
		<property name="customerDao" ref="customerDao"></property>
	</bean>
	<!-- 配置action对象，action对象必须设置多例 ：scope="prototype" 。如果不设置默认单例，如果中间有报错就会一直报错，因为是单例的-->
	<bean id="customerAction" class="cn.bimart.web.action.CustomerAction" scope="prototype">
		<property name="customerService" ref="customerService"></property>
	</bean>
</beans>